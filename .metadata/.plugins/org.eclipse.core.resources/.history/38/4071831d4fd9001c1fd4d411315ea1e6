package arvore;

import java.util.ArrayList;

public class ArvoreBinario {
	private NoBinario root;
	private ArrayList<String> descricoes;

	public ArvoreBinario() {
		super();
		this.root = new NoBinario("raiz");
	}

	public ArvoreBinario(NoBinario root) {
		super();
		if (root == null) {
			this.root = new NoBinario("raiz");
		} else {
			this.root = root;
		}
	}

	public void addNo(String Add, String posicao, NoBinario noPai) throws Exception {
		NoBinario noToAdd = new NoBinario(Add);
		
		if(descricoes.indexOf(Add) == -1) {
			throw new Exception("Esse nó já existe na árvore!");
		}

		if (noPai == null) {
			addFilho(noToAdd, posicao, root);
		} else {
			addFilho(noToAdd, posicao, noPai);
		}
	}

	private void addFilho(NoBinario noToAdd, String posicao, NoBinario pai) {
                noToAdd.setPai(pai);
		if (posicao.equals("direita")) {
			pai.setDireita(noToAdd);
		} else {
			pai.setEsquerda(noToAdd);
		}
	}
	
	public void removeAllNo(String noToRemove) throws Exception {
		NoBinario noFound = searchNo(noToRemove);
		
		removeAllNoRecursive(noFound);
	}
	
	private void removeAllNoRecursive(
                NoBinario iterationNo) {
		if(iterationNo != null) {
			if(iterationNo.getEsquerda() != null && iterationNo.getDireita() != null) {			
				removeAllNoRecursive(iterationNo.getEsquerda());
				removeAllNoRecursive(iterationNo.getDireita());
			}
                        
                        if(iterationNo == iterationNo.getPai().getEsquerda()) {			
				iterationNo.getPai().setEsquerda(null);
			}
                        
                        if(iterationNo == iterationNo.getPai().getDireita()) {			
				iterationNo.getPai().setDireita(null);
			}
		}
	}
	
	public NoBinario searchNo(String noToSearch) throws Exception {
		NoBinario noFound = searchNoRecursive(noToSearch, root);
		
		if(noFound == null) {
			throw new Exception("Nenhum resultado encontrado!");
		}

		return noFound;
	}
	
	private NoBinario searchNoRecursive(String noToRemove, NoBinario iterationNo) {
		if(iterationNo == null) {
			return null;
		}
		if(iterationNo.getDescricao().equals(noToRemove)) {
			return iterationNo;
		}
		
		NoBinario lineageNoEsquerda = searchNoRecursive(noToRemove, iterationNo.getEsquerda());
		
		if(lineageNoEsquerda != null) {
			return lineageNoEsquerda;
		}
	
		return searchNoRecursive(noToRemove, iterationNo.getDireita());
	}
	
}
